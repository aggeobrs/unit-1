{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"For Loops tracing","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOg/zYUG7rtX6hvxrnCMo7/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"FoIPBBlKa-di"},"source":["**1. Calculate the shortest distance between cities**\n"]},{"cell_type":"code","metadata":{"id":"bzy4Blqky9ik"},"source":["x=[]\n","y=[]\n","names=[]\n","#receive info\n","number=int(input(\"Enter the number of the cities: \"))\n","for i in range(number):\n","  X=int(input(\"Enter the coordinate x: \"))\n","  Y=int(input(\"Enter the coordinate y: \"))\n","  name=input(\"Enter the name of the city: \")\n","  x.append(X)\n","  y.append(Y)\n","  names.append(name)\n","#calculate the distances\n","distances=[]\n","for a in range(1,number):\n","    distance=((x[0]-x[a])**2 + (y[a]-y[0])**2)**0.5\n","    distances.append(distance)\n","#find minimum\n","min=distances[0]\n","town=names[1]\n","for i in range(number-1):\n","  if min>distances[i]:\n","    min=distances[i]\n","    town=names[i+1]\n","print(\"The closest city to \", names[0] ,\" is: \", town)"],"execution_count":null,"outputs":[]}]}